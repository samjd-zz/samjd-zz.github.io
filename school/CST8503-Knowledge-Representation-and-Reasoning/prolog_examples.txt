%%% SWI-Prolog Examples Collection
%%% Version 9.2.9 Compatible
%%% A comprehensive set of examples demonstrating various Prolog features

%% ============================================
%% 1. BASIC FACTS AND QUERIES
%% ============================================

% Family relationships
parent(tom, bob).
parent(tom, liz).
parent(bob, ann).
parent(bob, pat).
parent(pat, jim).

male(tom).
male(bob).
male(jim).
male(pat).
female(liz).
female(ann).

% Rules
father(X, Y) :- parent(X, Y), male(X).
mother(X, Y) :- parent(X, Y), female(X).
grandparent(X, Z) :- parent(X, Y), parent(Y, Z).
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.

% Example queries:
% ?- father(tom, X).
% ?- grandparent(tom, X).
% ?- sibling(ann, X).

%% ============================================
%% 2. LISTS AND RECURSION
%% ============================================

% List membership
member(X, [X|_]).
member(X, [_|T]) :- member(X, T).

% List length
list_length([], 0).
list_length([_|T], N) :- list_length(T, N1), N is N1 + 1.

% Append lists
append([], L, L).
append([H|T1], L2, [H|T3]) :- append(T1, L2, T3).

% Reverse a list
reverse([], []).
reverse([H|T], R) :- reverse(T, RT), append(RT, [H], R).

% Sum of list elements
sum_list([], 0).
sum_list([H|T], Sum) :- sum_list(T, RestSum), Sum is H + RestSum.

% Find maximum in list
max_list([X], X).
max_list([H|T], Max) :- 
    max_list(T, MaxT),
    (H > MaxT -> Max = H ; Max = MaxT).

% Example queries:
% ?- member(3, [1,2,3,4]).
% ?- list_length([a,b,c,d], L).
% ?- reverse([1,2,3], R).
% ?- sum_list([1,2,3,4,5], S).

%% ============================================
%% 3. ARITHMETIC AND LOGIC
%% ============================================

% Factorial
factorial(0, 1).
factorial(N, F) :- 
    N > 0,
    N1 is N - 1,
    factorial(N1, F1),
    F is N * F1.

% Fibonacci
fibonacci(0, 0).
fibonacci(1, 1).
fibonacci(N, F) :-
    N > 1,
    N1 is N - 1,
    N2 is N - 2,
    fibonacci(N1, F1),
    fibonacci(N2, F2),
    F is F1 + F2.

% GCD (Greatest Common Divisor)
gcd(X, 0, X) :- X > 0.
gcd(X, Y, G) :- 
    Y > 0,
    R is X mod Y,
    gcd(Y, R, G).

% Prime number check
is_prime(2).
is_prime(N) :-
    N > 2,
    N mod 2 =\= 0,
    \+ has_factor(N, 3).

has_factor(N, F) :-
    F * F =< N,
    (N mod F =:= 0 ; 
     F2 is F + 2,
     has_factor(N, F2)).

% Example queries:
% ?- factorial(5, F).
% ?- fibonacci(10, F).
% ?- gcd(48, 18, G).
% ?- is_prime(17).

%% ============================================
%% 4. DATABASE OPERATIONS
%% ============================================

% Dynamic predicates declaration
:- dynamic student/3.
:- dynamic course/2.
:- dynamic enrolled/2.

% Initial data
student(1, 'Alice', 20).
student(2, 'Bob', 22).
student(3, 'Charlie', 21).

course(cs101, 'Intro to CS').
course(math201, 'Calculus II').
course(phy101, 'Physics I').

enrolled(1, cs101).
enrolled(1, math201).
enrolled(2, cs101).
enrolled(3, phy101).

% Add new student
add_student(ID, Name, Age) :-
    \+ student(ID, _, _),
    assertz(student(ID, Name, Age)).

% Remove student
remove_student(ID) :-
    retract(student(ID, _, _)),
    retractall(enrolled(ID, _)).

% Enroll student in course
enroll(StudentID, CourseID) :-
    student(StudentID, _, _),
    course(CourseID, _),
    \+ enrolled(StudentID, CourseID),
    assertz(enrolled(StudentID, CourseID)).

% Find all courses for a student
student_courses(StudentID, Courses) :-
    findall(CourseID, enrolled(StudentID, CourseID), Courses).

% Example queries:
% ?- add_student(4, 'David', 23).
% ?- enroll(4, math201).
% ?- student_courses(1, Courses).

%% ============================================
%% 5. SEARCHING AND PATHFINDING
%% ============================================

% Graph represented as edges
edge(a, b, 3).
edge(a, c, 4).
edge(b, d, 2).
edge(c, d, 6).
edge(c, e, 5).
edge(d, e, 1).

% Bidirectional edges
connected(X, Y, W) :- edge(X, Y, W).
connected(X, Y, W) :- edge(Y, X, W).

% Find path between two nodes
path(Start, End, Path) :-
    path(Start, End, [Start], Path).

path(End, End, Visited, Path) :-
    reverse(Visited, Path).
path(Start, End, Visited, Path) :-
    connected(Start, Next, _),
    \+ member(Next, Visited),
    path(Next, End, [Next|Visited], Path).

% Find shortest path (simplified)
shortest_path(Start, End, Path, Cost) :-
    findall([P, C], (path(Start, End, P), path_cost(P, C)), AllPaths),
    min_cost_path(AllPaths, [Path, Cost]).

path_cost([_], 0).
path_cost([A, B|Rest], Cost) :-
    connected(A, B, W),
    path_cost([B|Rest], RestCost),
    Cost is W + RestCost.

min_cost_path([H], H).
min_cost_path([[P1, C1], [P2, C2]|Rest], MinPath) :-
    (C1 =< C2 -> min_cost_path([[P1, C1]|Rest], MinPath) ;
                  min_cost_path([[P2, C2]|Rest], MinPath)).

% Example queries:
% ?- path(a, e, Path).
% ?- shortest_path(a, e, Path, Cost).

%% ============================================
%% 6. CONSTRAINT SOLVING
%% ============================================

% N-Queens problem (4-queens example)
queens_4(Board) :-
    Board = [Q1, Q2, Q3, Q4],
    permutation([1,2,3,4], Board),
    safe(Board).

safe([]).
safe([Q|Qs]) :- 
    safe(Qs),
    no_attack(Q, Qs, 1).

no_attack(_, [], _).
no_attack(Q, [Q2|Qs], Dist) :-
    Q =\= Q2,
    abs(Q - Q2) =\= Dist,
    Dist1 is Dist + 1,
    no_attack(Q, Qs, Dist1).

% Sudoku solver (simplified 4x4)
sudoku_4x4(Puzzle) :-
    Puzzle = [
        [A1, A2, A3, A4],
        [B1, B2, B3, B4],
        [C1, C2, C3, C4],
        [D1, D2, D3, D4]
    ],
    % Domain
    append(Puzzle, Vars),
    Vars ins 1..4,
    % Row constraints
    all_distinct([A1, A2, A3, A4]),
    all_distinct([B1, B2, B3, B4]),
    all_distinct([C1, C2, C3, C4]),
    all_distinct([D1, D2, D3, D4]),
    % Column constraints
    all_distinct([A1, B1, C1, D1]),
    all_distinct([A2, B2, C2, D2]),
    all_distinct([A3, B3, C3, D3]),
    all_distinct([A4, B4, C4, D4]),
    % 2x2 box constraints
    all_distinct([A1, A2, B1, B2]),
    all_distinct([A3, A4, B3, B4]),
    all_distinct([C1, C2, D1, D2]),
    all_distinct([C3, C4, D3, D4]).

% Helper for distinct elements
all_distinct([]).
all_distinct([H|T]) :- 
    \+ member(H, T),
    all_distinct(T).

% Example queries:
% ?- queens_4(Board).
% ?- sudoku_4x4([[1,_,_,4],[_,2,3,_],[_,3,2,_],[4,_,_,1]]).

%% ============================================
%% 7. DCG (Definite Clause Grammar)
%% ============================================

% Simple English sentence parser
sentence --> noun_phrase, verb_phrase.
noun_phrase --> determiner, noun.
noun_phrase --> noun.
verb_phrase --> verb, noun_phrase.
verb_phrase --> verb.

determiner --> [the].
determiner --> [a].
noun --> [cat].
noun --> [dog].
noun --> [bird].
verb --> [runs].
verb --> [flies].
verb --> [chases].

% Arithmetic expression evaluator
expr(Result) --> term(Result).
expr(Result) --> term(T), [+], expr(E), {Result is T + E}.
expr(Result) --> term(T), [-], expr(E), {Result is T - E}.

term(Result) --> factor(Result).
term(Result) --> factor(F), [*], term(T), {Result is F * T}.
term(Result) --> factor(F), [/], term(T), {Result is F / T}.

factor(N) --> [N], {number(N)}.
factor(Result) --> ['('], expr(Result), [')'].

% Example queries:
% ?- phrase(sentence, [the, cat, chases, a, bird]).
% ?- phrase(expr(R), [2, +, 3, *, 4]).

%% ============================================
%% 8. META-PREDICATES AND HIGHER-ORDER
%% ============================================

% Map operation
map(_, [], []).
map(Pred, [H|T], [H2|T2]) :-
    call(Pred, H, H2),
    map(Pred, T, T2).

% Filter operation
filter(_, [], []).
filter(Pred, [H|T], [H|T2]) :-
    call(Pred, H),
    filter(Pred, T, T2).
filter(Pred, [H|T], T2) :-
    \+ call(Pred, H),
    filter(Pred, T, T2).

% Fold/Reduce operation
fold(_, Acc, [], Acc).
fold(Pred, Acc, [H|T], Result) :-
    call(Pred, H, Acc, NewAcc),
    fold(Pred, NewAcc, T, Result).

% Example helper predicates
double(X, Y) :- Y is X * 2.
is_even(X) :- X mod 2 =:= 0.
add(X, Y, Z) :- Z is X + Y.

% Example queries:
% ?- map(double, [1,2,3,4], R).
% ?- filter(is_even, [1,2,3,4,5,6], R).
% ?- fold(add, 0, [1,2,3,4,5], Sum).

%% ============================================
%% 9. FILE I/O AND STRING MANIPULATION
%% ============================================

% Read file lines
read_file_lines(File, Lines) :-
    open(File, read, Stream),
    read_lines(Stream, Lines),
    close(Stream).

read_lines(Stream, []) :-
    at_end_of_stream(Stream), !.
read_lines(Stream, [Line|Lines]) :-
    read_line_to_string(Stream, Line),
    read_lines(Stream, Lines).

% Write list to file
write_list_to_file(File, List) :-
    open(File, write, Stream),
    write_items(Stream, List),
    close(Stream).

write_items(_, []).
write_items(Stream, [H|T]) :-
    write(Stream, H),
    nl(Stream),
    write_items(Stream, T).

% String operations
string_reverse(Str, Rev) :-
    string_chars(Str, Chars),
    reverse(Chars, RevChars),
    string_chars(Rev, RevChars).

string_palindrome(Str) :-
    string_reverse(Str, Str).

% Example queries:
% ?- string_reverse("hello", R).
% ?- string_palindrome("racecar").

%% ============================================
%% 10. DEBUGGING AND TESTING
%% ============================================

% Unit test framework
:- dynamic test_result/2.

run_tests :-
    retractall(test_result(_, _)),
    test_factorial,
    test_list_operations,
    test_path_finding,
    report_results.

test_factorial :-
    (factorial(5, 120) -> 
        assertz(test_result(factorial, pass)) ; 
        assertz(test_result(factorial, fail))).

test_list_operations :-
    (reverse([1,2,3], [3,2,1]) -> 
        assertz(test_result(reverse, pass)) ; 
        assertz(test_result(reverse, fail))),
    (sum_list([1,2,3,4], 10) -> 
        assertz(test_result(sum_list, pass)) ; 
        assertz(test_result(sum_list, fail))).

test_path_finding :-
    (path(a, e, _) -> 
        assertz(test_result(path, pass)) ; 
        assertz(test_result(path, fail))).

report_results :-
    findall(Test-Result, test_result(Test, Result), Results),
    format('Test Results:~n'),
    forall(member(T-R, Results), format('  ~w: ~w~n', [T, R])).

% Trace helper for debugging
debug_trace(Goal) :-
    format('Calling: ~w~n', [Goal]),
    call(Goal),
    format('Success: ~w~n', [Goal]).

% Example queries:
% ?- run_tests.
% ?- debug_trace(factorial(3, F)).